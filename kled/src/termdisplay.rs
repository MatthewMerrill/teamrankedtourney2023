use std::fmt::Display;

use newcular::board::Board;
use newcular::board::Mov;
use newcular::simple::SimpleBoard;
use newcular::simple::SimpleMove;

const dashes: &str =
    "--------------------------------------------------------------------------------";
const spaces: &str =
    "                                                                                ";

// const char* hotwheelschess[] {
//   "* * * **** ** ********  ***    *** **********",
//   "**** * * * ****** ** *  **    *  ***** ** ** ",
//   "* ** * * **** **  *  *   **   *  * **   ** **",
//   "* * *  * **** *************    *** **********"
// };

// mod termdisplay;s {

// static term_display: TermDisplay;

struct TermDisplay<M: Mov, B: Board<M>> {
    prev_state: B,
    cur_state: B,
    move_history: Vec<M>,
}

impl TermDisplay<SimpleMove, SimpleBoard> {
    fn updateChar(r: u8, c: u8, hlRow: u32, hlCol: u32, state: SimpleBoard) {
        let bit = 1u64 << (r * 7 + c);
        let basebg = match (1u8 & (r ^ c)) {
            0 => 230u8,
            _ => 252u8,
        };
        if (r  == hlRow && (c - hlCol) * (c - hlCol) <= 0) {
            basebg = 109;
        }
        textbg_256(basebg);
        if (state.piece_mask & bit) {
            if (state.player_one_mask & (1ULL << (r * 7 + c))) {
                textfg_256(88);
            } else {
                textfg_256(18);
            }
            if (state.teams & bit) {
                printf("_");
            } else {
                printf(".");
            }
            textbg_256(if (c == hlCol && (r - hlRow) * (r - hlRow) <= 1) {
                109
            } else {
                basebg
            });
            if (state.king_mask & bit) {
                printf("K");
            } else if (state.knight_mask & bit) {
                printf("N");
            } else if (state.bishop_mask & bit) {
                printf("B");
            } else if (state.rook_mask & bit) {
                printf("R");
            } else if (state.pawn_mask & bit) {
                printf("P");
            }
            textbg_256(basebg);
            if (state.player_one_mask & bit) {
                printf("_");
            } else {
                printf(".");
            }
        } else if (c == hlCol) {
            printf(" ");
            textbg_256(if (c == hlCol && (r - hlRow) * (r - hlRow) <= 1) {
                109
            } else {
                basebg
            });
            printf(" ");
            textbg_256(basebg);
            printf(" ");
        } else {
            printf("   ");
        }
    }

    fn printBoardRow(self, r: u8) {
        let mut fromRow = -1i8;
        let mut fromCol = -1i8;
        let mut toRow = -1i8;
        let mut toCol = -1i8;
        if (!self.move_history.is_empty()) {
            let lastMove = self.move_history[historyVector.size() - 1];
            fromRow = lastMove / 7;
            fromCol = lastMove % 7;
            toRow = lastMove / 7;
            toCol = lastMove % 7;
        }
        printf(" ");
        for c in (0..7) {
            textattr(RESET);
            textattr(BRIGHT);
            updateChar(r, c, fromRow, fromCol, &prevState);
            textattr(RESET);
        }
        printf(" %d ", r + 1);
        for c in (0..7) {
            textattr(RESET);
            textattr(BRIGHT);
            updateChar(r, c, toRow, toCol, &curState);
            textattr(RESET);
        }
        printf(" ");
    }

    // #ifdef _WIN32
    // #define boxchar "#"
    // #else
    // #define boxchar "\u2588"
    // #endif
    const boxchar: &str = "\u{2588}";
    pub fn displayAll(self) {
        println!("\x1B[1;1H\x1B[2J\x1B[1;1H{}\n{}", dashes, spaces);
        // #ifndef NO_ANSI
        //     printf("%s", adversareval_googly_txt);
        // #else
        printHeader(
            adversarevalBlocks,
            3 * 12,
            BLACK + 30,
            WHITE + 30,
            boxchar,
            80,
        );
        // #endif
        printf("\n");
        printHeader(hotwheelschess, 3 * 15, RED + 30, YELLOW + 30, boxchar, 80);
        printf("%s\n", spaces);
        printf("%47.47s+%32.32s\n", dashes, dashes);
        let historyBase = if (historyVector.size() > 33) {
            historyVector.size() - 33
        } else {
            0u32
        };
        for row in (0..13) {
            match (row) {
                0 => {
                    print!(" Prev                 ");
                    textfg(RED);
                    print!("_C_");
                    textattr(RESET);
                    print!("                  Now ");
                }

                1 | 11 => print!("                                               "),

                10 => printf("  A  B  C  D  E  F  G     A  B  C  D  E  F  G  "),

                12 => {
                    textfg(BLUE);
                    print!("                      .H.                      ");
                    textattr(RESET);
                }

                _ => printBoardRow(9 - row),
            }
            print!("| ");
            match (row) {
                0 => print!("History:\n"),
                1 => print!(historyBase > 0 ? "...\n" : "\n"),
                _ => {
                    for i in (0..3) {
                        if ((row - 2) * 3 + i + historyBase < historyVector.size()) {
                            print!("{} / {} ",
              historyVector.at((row-2) * 3 + i + historyBase).Print().to_string();
              historyVector.at((row-2) * 3 + i + historyBase).Invert().to_string());
                        }
                    }
                    println();
                }
            }
        }
        printf("%47.47s+%32.32s\n", dashes, dashes);
    }
}
// }

// #ifdef _WIN32
// unsigned char adversareval_googly_txt[] = {
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x20, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x23, 0x23,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23,
//   0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31,
//   0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x20, 0x23,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23,
//   0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31,
//   0x6d, 0x23, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20,
//   0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x33, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23, 0x23, 0x23, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23,
//   0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x33, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23, 0x20, 0x23, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x20,
//   0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x20, 0x20, 0x20, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x23, 0x23,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23,
//   0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33,
//   0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x23, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x20, 0x23, 0x23, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x23, 0x23,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23,
//   0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33,
//   0x6d, 0x23, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x20, 0x20, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x0a, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20,
//   0x20, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x23, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x20, 0x23,
//   0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x32, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x20, 0x23, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x23, 0x23,
//   0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0x20, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x32, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a, 0x00,
// };
// #else
// unsigned char adversareval_googly_txt[] = {
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x20, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2,
//   0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2,
//   0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0x20, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x0a, 0x2e, 0x20, 0x4d, 0x61, 0x74, 0x74, 0x68, 0x65, 0x77,
//   0x20, 0x4d, 0x65, 0x72, 0x72, 0x69, 0x6c, 0x6c, 0x20, 0x2e, 0x20, 0x20,
//   0x20, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96,
//   0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d,
//   0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96,
//   0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20,
//   0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96,
//   0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0x20, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x20, 0x67, 0x6f, 0x2e, 0x6d,
//   0x61, 0x74, 0x74, 0x6d, 0x65, 0x72, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x20,
//   0x2e, 0x0a, 0x2e, 0x20, 0x32, 0x30, 0x31, 0x38, 0x20, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20,
//   0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2,
//   0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31,
//   0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31,
//   0x6d, 0x20, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88,
//   0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34,
//   0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x2f, 0x61, 0x64,
//   0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x20, 0x2e,
//   0x0a, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20, 0x1b,
//   0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x20, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0x20,
//   0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96,
//   0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x20, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d,
//   0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a, 0x00
// };
// #endif
