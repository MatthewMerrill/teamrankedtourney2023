use std::fmt::Display;

use newcular::board::Board;
use newcular::board::Mov;
use newcular::board::PieceKind;
use newcular::board::Player;
use newcular::simple::SimpleBoard;
use newcular::simple::SimpleMove;

const DASHES: &str =
    "--------------------------------------------------------------------------------";
const SPACES: &str =
    "                                                                                ";

// const char* hotwheelschess[] {
//   "* * * **** ** ********  ***    *** **********",
//   "**** * * * ****** ** *  **    *  ***** ** ** ",
//   "* ** * * **** **  *  *   **   *  * **   ** **",
//   "* * *  * **** *************    *** **********"
// };

const NEWCULAR: &str = "        /|    / /                                                           
       //|   / /  ___                   ___              //  ___      __    
      // |  / / //___) ) //  / /  / / //   ) ) //   / / // //   ) ) //  ) ) 
     //  | / / //       //  / /  / / //       //   / / // //   / / //       
    //   |/ / ((____   ((__( (__/ / ((____   ((___( ( // ((___( ( //        

               //   ) )                                    
              //        / __      ___      ___      ___    
             //        //   ) ) //___) ) ((   ) ) ((   ) ) 
            //        //   / / //         \\ \\      \\ \\     
           ((____/ / //   / / ((____   //___) ) //___) )        
";

// mod termdisplay;s {

// static term_display: TermDisplay;

use ansi_term;

pub struct TermDisplay<M: Mov, B: Board<M>> {
    pub prev_state: B,
    pub cur_state: B,
    pub move_history: Vec<M>,
}

impl<M: Mov, B: Board<M>> TermDisplay<M, B> {
    fn print_char(&self, r: u8, c: u8, hl_row: u8, hl_col: u8, state: &B) {
        let basebg = match 1u8 & (r ^ c) {
            _ if r == hl_row && c == hl_col => ansi_term::Color::Fixed(109),
            0 => ansi_term::Color::Fixed(230u8),
            _ => ansi_term::Color::Fixed(252u8),
        };
        if let Some((player, piece_kind)) = state.get_piece(r, c) {
            let ch = match piece_kind {
                PieceKind::B => "B",
                PieceKind::K => "K",
                PieceKind::N => "N",
                PieceKind::P => "P",
                PieceKind::R => "R",
            };
            let (fg, plch) = match player {
                Player::PlayerOne => (ansi_term::Color::Fixed(18), "."),
                Player::PlayerTwo => (ansi_term::Color::Fixed(88), "_"),
            };
            print!(
                "{}",
                ansi_term::Style::new()
                    .fg(fg)
                    .on(basebg)
                    .paint(format!("{}{}{}", plch, ch, plch))
            );
        // } else if (c == hl_col) {
        //     print!(
        //         "{}{}{}",
        //         basebg.paint(" "),
        //         ansi_term::Color::Fixed(109).paint(" "),
        //         basebg.paint(" ")
        //     );
        } else {
            print!("{}", ansi_term::Style::new().on(basebg).paint("   "));
        }
    }

    fn print_board_row(&self, r: u8) {
        let mut from_row = 200u8;
        let mut from_col = 200u8;
        let mut dest_row = 200u8;
        let mut dest_col = 200u8;
        if let Some(lastMove) = self.move_history.last() {
            ((from_row, from_col), (dest_row, dest_col)) = lastMove.get_from_dest();
        }
        print!(" ");
        for c in 0..7u8 {
            // textattr(RESET);
            // textattr(BRIGHT);
            self.print_char(r, c, from_row, from_col, &self.prev_state);
            // textattr(RESET);
        }
        print!(" {} ", r + 1);
        for c in 0..7 {
            // textattr(RESET);
            // textattr(BRIGHT);
            self.print_char(r, c, dest_row, dest_col, &self.cur_state);
            // textattr(RESET);
        }
        print!(" ");
    }

    // #ifdef _WIN32
    // #define boxchar "#"
    // #else
    // #define boxchar "\u2588"
    // #endif
    // const boxchar: &str = "\u{2588}";
    pub fn display_all(&self) {
        // println!("\x1B[1;1H\x1B[2J\x1B[1;1H{}\n{}", DASHES, SPACES);
        // println!("{}", NEWCULAR);
        // #ifndef NO_ANSI
        //     printf("%s", adversareval_googly_txt);
        // #else
        // self.printHeader(
        //     adversarevalBlocks,
        //     3 * 12,
        //     BLACK + 30,
        //     WHITE + 30,
        //     boxchar,
        //     80,
        // );
        // #endif
        // print!("\n");
        // printHeader(hotwheelschess, 3 * 15, RED + 30, YELLOW + 30, boxchar, 80);
        // print!("{}\n", SPACES);
        println!("{:-<47}+{:-<32}", "", "");
        let history_base = if self.move_history.len() > 33 {
            self.move_history.len() - 33
        } else {
            0usize
        };
        for row in 0..14usize {
            match row {
                0 => {
                    print!(" Prev                 ");
                    // textfg(RED);
                    print!("_C_");
                    // textattr(RESET);
                    print!("                  Now ");
                }

                1 | 12 => print!("                                               "),

                11 => print!("  A  B  C  D  E  F  G     A  B  C  D  E  F  G  "),

                13 => {
                    // textfg(BLUE);
                    print!("                      .H.                      ");
                    // textattr(RESET);
                }

                _ => self.print_board_row(10 - row as u8),
            }
            print!("| ");
            match row {
                0 => print!("History:\n"),
                1 => print!("{}", if history_base > 0 { "...\n" } else { "\n" }),
                _ => {
                    for i in 0..3 {
                        if let Some(mov) = self.move_history.get((row - 2) * 3 + i + history_base) {
                            print!("{}/{} ", mov, mov.invert());
                        }
                    }
                    println!();
                }
            }
        }
        println!("{:-<47}+{:-<32}", "", "");
    }
}
// }

// #ifdef _WIN32
// unsigned char adversareval_googly_txt[] = {
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x20, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x23, 0x23,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23,
//   0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31,
//   0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x20, 0x23,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23,
//   0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31,
//   0x6d, 0x23, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20,
//   0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x33, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23, 0x23, 0x23, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23,
//   0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x33, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23, 0x20, 0x23, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x20,
//   0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x20, 0x20, 0x20, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x23, 0x23,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23,
//   0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33,
//   0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x23, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23, 0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x20, 0x23, 0x23, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x23, 0x23,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23,
//   0x23, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33,
//   0x6d, 0x23, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x32, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x20, 0x20, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x0a, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20,
//   0x20, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x23, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x20, 0x23,
//   0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x32, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0x23, 0x20, 0x23, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x23, 0x23,
//   0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0x20, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x32, 0x6d, 0x23, 0x20, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x31, 0x6d, 0x23, 0x23, 0x23, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a, 0x00,
// };
// #else
// unsigned char adversareval_googly_txt[] = {
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0x20, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2,
//   0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88,
//   0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2,
//   0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d,
//   0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0x20, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x0a, 0x2e, 0x20, 0x4d, 0x61, 0x74, 0x74, 0x68, 0x65, 0x77,
//   0x20, 0x4d, 0x65, 0x72, 0x72, 0x69, 0x6c, 0x6c, 0x20, 0x2e, 0x20, 0x20,
//   0x20, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96,
//   0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d,
//   0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96,
//   0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20,
//   0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96,
//   0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0x20, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x20, 0x67, 0x6f, 0x2e, 0x6d,
//   0x61, 0x74, 0x74, 0x6d, 0x65, 0x72, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x20,
//   0x2e, 0x0a, 0x2e, 0x20, 0x32, 0x30, 0x31, 0x38, 0x20, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20,
//   0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2,
//   0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31,
//   0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31,
//   0x6d, 0x20, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x20, 0x1b, 0x5b,
//   0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96, 0x88,
//   0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34,
//   0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b,
//   0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x3b,
//   0x3b, 0x6d, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x2f, 0x61, 0x64,
//   0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x20, 0x2e,
//   0x0a, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x20, 0x20, 0x1b,
//   0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0x20, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d,
//   0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30,
//   0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d, 0xe2, 0x96, 0x88, 0x20,
//   0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33,
//   0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0xe2, 0x96,
//   0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b,
//   0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b,
//   0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x33, 0x6d, 0xe2, 0x96,
//   0x88, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x34, 0x6d, 0x20, 0xe2, 0x96, 0x88, 0xe2, 0x96,
//   0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x1b, 0x5b, 0x33, 0x32, 0x6d,
//   0xe2, 0x96, 0x88, 0x20, 0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b,
//   0x6d, 0x1b, 0x5b, 0x33, 0x31, 0x6d, 0xe2, 0x96, 0x88, 0xe2, 0x96, 0x88,
//   0xe2, 0x96, 0x88, 0x1b, 0x5b, 0x30, 0x3b, 0x3b, 0x6d, 0x20, 0x20, 0x20,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
//   0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a, 0x00
// };
// #endif
